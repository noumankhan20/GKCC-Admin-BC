import React, { useEffect, useState } from "react";
import GradientInput from "./GradientInput";
import GradientSelect from "./GradientSelect";
import { Country, State, City } from "country-state-city";
import Image from "next/image";
const countryCodes = require("country-codes-list");

const AssociationDetails = ({ register, errors, logoPreview }) => {
  // State for the phone country codes (unchanged)
  const [countries, setCountries] = useState([]);
  const [selectedCountryCode, setSelectedCountryCode] = useState("+1");

  // New state for the country list from the country-city-state package
  const [countryOptions, setCountryOptions] = useState([]);

  // Fetch country list using country-city-state package for country dropdown
  useEffect(() => {
    const countries = Country.getAllCountries();
    const formattedCountries = countries.map((country) => ({
      value: country.isoCode,
      label: country.name,
    }));
    setCountryOptions(formattedCountries);
  }, []);

  // Fetch phone country codes using country-codes-list package (remains unchanged)
  useEffect(() => {
    try {
      const customCountries = countryCodes.customList(
        "countryCode",
        "[{countryCode}] {countryNameEn}: +{countryCallingCode}"
      );

      const countryArray = Object.keys(customCountries).map((key) => {
        const dialCodeMatch = customCountries[key].match(/\+(\d+)/);
        const dial_code = dialCodeMatch ? `+${dialCodeMatch[1]}` : "";

        return {
          code: key,
          name: customCountries[key], // Displays "Country Name: +XX"
          dial_code: dial_code, // Value stored as "+XX"
        };
      });

      // Sort countries alphabetically by name
      const sortedCountries = countryArray.sort((a, b) =>
        a.name.localeCompare(b.name)
      );

      setCountries(sortedCountries);
    } catch (error) {
      console.error("Error loading countries:", error);
      setCountries([]);
    }
  }, []);

  return (
    <div className="space-y-4">
      {/* Association Name */}
      <GradientInput
        id="associationName"
        label="Association Name"
        register={register}
        required
        minLength={{
          value: 2,
          message: "Association Name must be at least 2 characters",
        }}
        errors={errors}
        placeholder="Enter Association Name"
      />

      {/* Country dropdown using country-city-state package */}
      <GradientSelect
        id="country"
        label="Country"
        register={register}
        required
        errors={errors}
      >
        <option value="">Select a country</option>
        {countryOptions.map((country) => (
          <option key={country.value} value={country.value}>
            {country.label}
          </option>
        ))}
      </GradientSelect>

      {/* Location / City */}
      <GradientInput
        id="locationCity"
        label="Location / City"
        register={register}
        required
        minLength={{
          value: 2,
          message: "Location / City must be at least 2 characters",
        }}
        errors={errors}
        placeholder="Enter Location or City"
      />

      {/* Association Contact: Country Code + Number */}
      <div>
        <label className="block mb-1 font-medium text-gray-700">
          Association Contact No <span className="text-red-500">*</span>
        </label>
        <div className="flex space-x-2">
          {/* Country Code Selector (using country-codes-list package) */}
          <div className="w-1/2">
            <GradientSelect
              id="associationContactCountryCode"
              label="Country Code"
              register={register}
              required
              errors={errors}
              onChange={(e) => setSelectedCountryCode(e.target.value)}
            >
              <option value="">Select Country</option>
              {countries.map((country) => (
                <option key={country.code} value={country.dial_code}>
                  {country.name}
                </option>
              ))}
            </GradientSelect>
          </div>

          {/* Contact Number Input */}
          <div className="w-1/2">
            <GradientInput
              id="associationContactNumber"
              label="Number"
              register={register}
              required
              pattern={{
                value: /^[0-9]{4,15}$/,
                message:
                  "Invalid contact number. It should contain 4 to 15 digits.",
              }}
              errors={errors}
              placeholder="123456789"
              type="tel"
            />
          </div>
        </div>
      </div>

      {/* Email */}
      <GradientInput
        id="associationEmail"
        label="Email Address"
        register={register}
        required
        pattern={{
          value: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/,
          message: "Invalid email address",
        }}
        errors={errors}
        placeholder="Enter Email Address"
        type="email"
      />

      {/* Password */}
      <div>
        <div className="relative">
          <GradientInput
            id="password"
            label="Password"
            register={register}
            required
            pattern={{
              value:
                /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&#^()_\-+={}[\]|\\:;"'<>,.?/~`]).{8,}$/,
              message:
                "Must include uppercase, lowercase, number, and special character",
            }}
            minLength={{
              value: 8,
              message: "Password must be at least 8 characters",
            }}
            errors={errors}
            placeholder="Enter Password"
            type="password"
            className="pr-12"
          />
        </div>

        <p className="text-gray-500 text-sm mt-1">
          Password must be at least 8 characters and include uppercase, lowercase, number, and special character.
        </p>
      </div>

      {/* Website Link (Optional) */}
      <div>
        <label
          htmlFor="websiteLink"
          className="block mb-1 font-medium text-gray-700"
        >
          Website Link (Optional)
        </label>
        <div className="bg-gradient-to-r from-[#3D87E8] to-[#3ADEC2] p-[1px] rounded">
          <input
            id="websiteLink"
            type="url"
            {...register("websiteLink", {
              pattern: {
                value:
                  /^(https?:\/\/)?([\w\d\-]+\.){1,}[\w]{2,}(\/[\w\d\-._~:/?#[\]@!$&'()*+,;=]*)?$/,
                message: "Invalid URL",
              },
            })}
            className={`w-full bg-white border-none rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#3D87E8] shadow-lg ${
              errors.websiteLink ? "ring-2 ring-red-500" : ""
            }`}
            placeholder="Enter Website Link"
          />
        </div>
        {errors.websiteLink && (
          <p className="text-red-500 text-sm mt-1">
            {errors.websiteLink.message}
          </p>
        )}
      </div>

      {/* Association Logo (Optional) */}
      <div>
        <label
          htmlFor="associationLogo"
          className="block mb-1 font-medium text-gray-700"
        >
          Association Logo (Optional)
        </label>
        <div className="bg-gradient-to-r from-[#3D87E8] to-[#3ADEC2] p-[1px] rounded">
          <input
            id="associationLogo"
            type="file"
            accept="image/*"
            {...register("associationLogo")}
            className="w-full bg-white border-none rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#3D87E8] shadow-lg"
          />
        </div>
        {logoPreview && (
          <div className="mt-2">
            <Image
              src={logoPreview}
              alt="Association Logo Preview"
              width={96}
              height={96}
              className="object-cover rounded"
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default AssociationDetails;
